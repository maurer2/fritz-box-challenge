// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NavBar should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BoxInformationComponent
    isUpdating={false}
    list={
      Object {
        "branding": "avm",
        "model": "FRITZ!Box 6590 Cable",
        "restarts": "024",
        "technology": "Kabel",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <CSSTransitionGroup
        component={Symbol(react.fragment)}
        transitionAppear={false}
        transitionAppearTimeout={0}
        transitionEnter={true}
        transitionEnterTimeout={250}
        transitionLeave={true}
        transitionLeaveTimeout={250}
        transitionName="slide"
      >
        <ForwardRef>
          <NavBarEntry
            entry="branding"
          />
          <NavBarEntry
            entry="model"
          />
          <NavBarEntry
            entry="restarts"
          />
          <NavBarEntry
            entry="technology"
          />
        </ForwardRef>
      </CSSTransitionGroup>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <ForwardRef>
          <NavBarEntry
            entry="branding"
          />
          <NavBarEntry
            entry="model"
          />
          <NavBarEntry
            entry="restarts"
          />
          <NavBarEntry
            entry="technology"
          />
        </ForwardRef>,
        "component": Symbol(react.fragment),
        "transitionAppear": false,
        "transitionAppearTimeout": 0,
        "transitionEnter": true,
        "transitionEnterTimeout": 250,
        "transitionLeave": true,
        "transitionLeaveTimeout": 250,
        "transitionName": "slide",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <NavBarEntry
              entry="branding"
            />,
            <NavBarEntry
              entry="model"
            />,
            <NavBarEntry
              entry="restarts"
            />,
            <NavBarEntry
              entry="technology"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "0",
            "nodeType": "class",
            "props": Object {
              "entry": "branding",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "class",
            "props": Object {
              "entry": "model",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "class",
            "props": Object {
              "entry": "restarts",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "3",
            "nodeType": "class",
            "props": Object {
              "entry": "technology",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "BoxInformationWrapper-sc-13xfpz1-0",
            "isStatic": true,
            "rules": Array [
              "display:flex;margin:0;padding:0;justify-content:space-between;flex-wrap:wrap;background:red;",
            ],
          },
          "displayName": "BoxInformationWrapper",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "BoxInformationWrapper-sc-13xfpz1-0",
          "target": "ul",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      "type": [Function],
    },
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "SlideYTransition-sc-13xfpz1-1",
        "isStatic": true,
        "rules": Array [
          "position:absolute;left:0;right:0;bottom:0;.slide-appear,.slide-enter{transform:translateY(100%);}.slide-appear.slide-appear-active,.slide-enter.slide-enter-active{transform:translateY(0);transition:transform 250ms ease-out;}.slide-leave{transform:translateY(0);}.slide-leave.slide-leave-active{transform:translateY(100%);transition:transform 250ms ease-out;}",
        ],
      },
      "displayName": "SlideYTransition",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "SlideYTransition-sc-13xfpz1-1",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <CSSTransitionGroup
          component={Symbol(react.fragment)}
          transitionAppear={false}
          transitionAppearTimeout={0}
          transitionEnter={true}
          transitionEnterTimeout={250}
          transitionLeave={true}
          transitionLeaveTimeout={250}
          transitionName="slide"
        >
          <ForwardRef>
            <NavBarEntry
              entry="branding"
            />
            <NavBarEntry
              entry="model"
            />
            <NavBarEntry
              entry="restarts"
            />
            <NavBarEntry
              entry="technology"
            />
          </ForwardRef>
        </CSSTransitionGroup>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <ForwardRef>
            <NavBarEntry
              entry="branding"
            />
            <NavBarEntry
              entry="model"
            />
            <NavBarEntry
              entry="restarts"
            />
            <NavBarEntry
              entry="technology"
            />
          </ForwardRef>,
          "component": Symbol(react.fragment),
          "transitionAppear": false,
          "transitionAppearTimeout": 0,
          "transitionEnter": true,
          "transitionEnterTimeout": 250,
          "transitionLeave": true,
          "transitionLeaveTimeout": 250,
          "transitionName": "slide",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <NavBarEntry
                entry="branding"
              />,
              <NavBarEntry
                entry="model"
              />,
              <NavBarEntry
                entry="restarts"
              />,
              <NavBarEntry
                entry="technology"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "0",
              "nodeType": "class",
              "props": Object {
                "entry": "branding",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "class",
              "props": Object {
                "entry": "model",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "2",
              "nodeType": "class",
              "props": Object {
                "entry": "restarts",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "3",
              "nodeType": "class",
              "props": Object {
                "entry": "technology",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "BoxInformationWrapper-sc-13xfpz1-0",
              "isStatic": true,
              "rules": Array [
                "display:flex;margin:0;padding:0;justify-content:space-between;flex-wrap:wrap;background:red;",
              ],
            },
            "displayName": "BoxInformationWrapper",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "BoxInformationWrapper-sc-13xfpz1-0",
            "target": "ul",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        "type": [Function],
      },
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "SlideYTransition-sc-13xfpz1-1",
          "isStatic": true,
          "rules": Array [
            "position:absolute;left:0;right:0;bottom:0;.slide-appear,.slide-enter{transform:translateY(100%);}.slide-appear.slide-appear-active,.slide-enter.slide-enter-active{transform:translateY(0);transition:transform 250ms ease-out;}.slide-leave{transform:translateY(0);}.slide-leave.slide-leave-active{transform:translateY(100%);transition:transform 250ms ease-out;}",
          ],
        },
        "displayName": "SlideYTransition",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "SlideYTransition-sc-13xfpz1-1",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
